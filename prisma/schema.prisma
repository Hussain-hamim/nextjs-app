// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//A tool that allows you to interact with a database 
//using code instead of SQL

/**
 * whats prisma?
 * Prisma is an ORM (Object-Relational Mapper) that makes it easier
 * to work with databases in JavaScript and TypeScript. Instead of
 * writing raw SQL, you use Prisma Client, which generates SQL for you.
 */



/////////////////////////
//for user adapter models, will store in db
//
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  // hashedPassword String?  @map("hashed_password")
  hashedPassword String?  
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

//////////////////////

// model User {
//   id           Int      @id @default(autoincrement())
//   email        String   @unique
//   name         String
//   followers    Int      @default(0)
//   isActive     Boolean  @default(true)
//   registeredAt DateTime @default(now())
// }

// model Product {
//   id    Int    @id @default(autoincrement())
//   name  String
//   price Float
// }

// model Order {
//   id         Int      @id @default(autoincrement())
//   userId     Int
//   productId  Int
//   quantity   Int
//   totalPrice Float
//   orderDate  DateTime @default(now())
// }

// model Review {
//   id        Int      @id @default(autoincrement())
//   productId Int
//   userId    Int
//   rating    Int
//   comment   String
//   createdAt DateTime @default(now())
// }

// model Category {
//   id          Int    @id @default(autoincrement())
//   name        String
//   description String
// }

// model Comment {
//   id        Int      @id @default(autoincrement())
//   postId    Int
//   userId    Int
//   content   String
//   createdAt DateTime @default(now())
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   title     String
//   content   String
//   createdAt DateTime @default(now())
// }

// model Profile {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   bio       String
//   avatarUrl String
//   createdAt DateTime @default(now())
// }

// model Cart {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   productId Int
//   quantity  Int
//   createdAt DateTime @default(now())
// }

// model Address {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   street    String
//   city      String
//   state     String
//   zipCode   String
//   createdAt DateTime @default(now())
// }